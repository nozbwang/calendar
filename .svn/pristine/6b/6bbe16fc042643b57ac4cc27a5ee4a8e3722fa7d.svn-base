package com.zbwang.calendar.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.lang.ArrayUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zbwang.calendar.constant.Constants;
import com.zbwang.calendar.dao.IAttachDao;
import com.zbwang.calendar.domain.Attach;
import com.zbwang.calendar.domain.Book;
import com.zbwang.calendar.domain.Voice;
import com.zbwang.calendar.service.IAttachService;
import com.zbwang.calendar.service.ICompressService;
import com.zbwang.calendar.util.CommonUtil;

@Service
public class AttachServiceImpl implements IAttachService {

	@Autowired
	private IAttachDao faceVoiceAttachDao;
	@Autowired
	private ICompressService compressService;

	@Override
	public Attach getOriginalAttachByAttachId(Integer attachId) {
		return faceVoiceAttachDao.getOriginalAttachByAttachId(attachId);
	}

	@Override
	public Attach getBigAttachByAttachId(Integer attachId) {
		return faceVoiceAttachDao.getBigAttachByAttachId(attachId);
	}

	@Override
	public Attach getSmallAttachByAttachId(Integer attachId) {
		return faceVoiceAttachDao.getSmallAttachByAttachId(attachId);
	}

	@Override
	public void prepareVoiceAttach(List<Voice> latestVoiceGroup) {
		List<Integer> voiceIdGroup = latestVoiceGroup.stream().map(i -> i.getVoiceId()).collect(Collectors.toList());
		Map<Integer, List<Attach>> faceVoiceAttachMap = getAttachByBelongIdGroup(Constants.B_TYPE_VOICE, voiceIdGroup);
		for (Voice faceVoice : latestVoiceGroup) {
			faceVoice.setFaceVoiceAttachs(faceVoiceAttachMap.get(faceVoice.getVoiceId()));
		}
	}

	@Override
	public void prepareBookAttach(List<Book> books) {
		List<Integer> bookIdGroup = books.stream().map(b -> b.getBookId()).collect(Collectors.toList());
		Map<Integer, Attach> faceVoiceAttachMap = getSingleAttachByBelongIdGroup(Constants.B_TYPE_BOOK, bookIdGroup);
		for (Book book : books) {
			book.setCover(faceVoiceAttachMap.get(book.getBookId()));
		}
	}

	public Map<Integer, List<Attach>> getAttachByBelongIdGroup(String belongType, List<Integer> belongIds) {
		if (CollectionUtils.isEmpty(belongIds)) {
			return Collections.emptyMap();
		}
		List<Attach> faceVoiceAttachGroup = faceVoiceAttachDao.getAttachByBelongIdGroup(belongType, belongIds);
		return faceVoiceAttachGroup.stream().collect(Collectors.groupingBy(Attach::getBelongId));
	}

	public Map<Integer, Attach> getSingleAttachByBelongIdGroup(String belongType, List<Integer> belongIds) {
		if (CollectionUtils.isEmpty(belongIds)) {
			return Collections.emptyMap();
		}
		List<Attach> faceVoiceAttachGroup = faceVoiceAttachDao.getAttachByBelongIdGroup(belongType, belongIds);
		return faceVoiceAttachGroup.stream().collect(Collectors.toMap(Attach::getBelongId, a -> a, (k1, k2) -> k1));
	}

	@Override
	public void insertLocalPicture(Integer userId, FileItem localPicture, String belongType, int belongId) {
		if (localPicture != null) {
			Attach faceVoiceAttach = new Attach();
			faceVoiceAttach.setBelongId(belongId);
			faceVoiceAttach.setBelongType(belongType);
			faceVoiceAttach.setUserId(userId);
			faceVoiceAttach.setAttachmentName(CommonUtil.getPhotoNameLimited(localPicture.getName()));
			faceVoiceAttach.setSize(localPicture.getSize());
			faceVoiceAttach.setType(localPicture.getContentType());
			faceVoiceAttach.setContent(localPicture.get());
			localPicture.delete();
			faceVoiceAttachDao.insertVoiceAttach(faceVoiceAttach);
		}
	}

	@Override
	public void deleteLocalPicture(Integer userId, String belongType, int belongId) {
		Attach faceVoiceAttach = new Attach();
		faceVoiceAttach.setBelongId(belongId);
		faceVoiceAttach.setBelongType(belongType);
		faceVoiceAttach.setUserId(userId);
		faceVoiceAttachDao.deleteLocalPicture(faceVoiceAttach);
	}

	@Override
	public void insertLocalPicture(Integer userId, List<FileItem> localPictures, String belongType, int belongId) {
		if (CollectionUtils.isEmpty(localPictures)) {
			return;
		}
		localPictures.forEach(localPicture -> {
			insertLocalPicture(userId, localPictures, belongType, belongId);
		});
	}

	@Override
	public void compressPicture() {
		List<Attach> faceVoiceAttachNeedCompress = faceVoiceAttachDao.getAttachNeedCompress();
		for (Attach faceVoiceAttach : faceVoiceAttachNeedCompress) {
			Attach faceVoiceOriginalAttach = getOriginalAttachByAttachId(faceVoiceAttach.getAttachmentId());
			if (faceVoiceAttach != null && ArrayUtils.isNotEmpty(faceVoiceOriginalAttach.getContent())) {
				byte[] bigContent = compressService.compressPic(faceVoiceOriginalAttach.getContent(), 1000, 1000, true);
				byte[] smallContent = compressService.compressPic(faceVoiceOriginalAttach.getContent(), 200, 200, true);
				faceVoiceOriginalAttach.setBigContent(bigContent);
				faceVoiceOriginalAttach.setSmallContent(smallContent);
				faceVoiceAttachDao.updateAttachContentByAttachId(faceVoiceOriginalAttach);
			}
		}
	}
}
